// Code generated by go-bindata.
// sources:
// templates/consul_catalog.tmpl
// templates/docker.tmpl
// templates/ecs.tmpl
// templates/eureka.tmpl
// templates/kubernetes.tmpl
// templates/kv.tmpl
// templates/marathon.tmpl
// templates/mesos.tmpl
// templates/notFound.tmpl
// templates/rancher.tmpl
// DO NOT EDIT!

package autogen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesConsul_catalogTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\xc1\x6e\xe3\x20\x10\xbd\xe7\x2b\x46\x28\x87\x5d\xa9\xa5\x3d\x57\xca\xa1\x91\x76\xd5\xcb\x56\xd5\xee\xde\xa2\x1c\x88\x3d\xb1\x51\x1d\xb0\x60\xdc\xa6\x42\xfc\xfb\xca\x06\x1c\x9c\x78\xa3\x9c\x02\xe6\xf1\xe6\xbd\x99\x17\x36\x3b\x51\xbc\xa3\x2a\xed\x76\xe1\x9c\x11\xaa\x42\x58\x4a\x55\xe2\xf1\x0e\x96\x4a\x97\x08\x4f\x2b\xe0\xaf\xba\x44\xeb\xfd\x02\xc0\x39\xb9\x07\x85\xf0\xad\x42\x7a\x26\x32\x72\xd7\x11\x02\x43\x25\x76\x0d\xb2\x70\x85\xff\x41\xf3\x21\x0b\xe4\x7f\x45\x65\x81\x91\xe9\x90\x7d\x07\xb6\x17\x8d\x45\x36\xb0\x00\x8c\x65\x39\x8b\xab\x7b\xe7\x2a\xa4\x75\xd8\x04\x22\xef\x19\xb7\x68\x3e\xd0\x58\xce\xf2\xe3\x57\x71\xc0\x28\x2f\x88\xf5\x9e\x6d\x07\x5e\x80\xce\x34\xb0\x82\x00\xcf\x14\xb6\x46\x93\x2e\x74\x33\xaf\xb1\x26\x6a\x99\xf7\x4f\x0f\x0f\x79\x99\xe7\xb2\x34\x68\x6d\x12\xf3\xe4\xdc\xf4\xee\x9b\x36\xe4\x3d\x8b\x85\x9d\x5b\x7e\xa2\xac\x6a\xea\x5b\x36\x2d\x1e\x2d\xf2\x70\x3e\x2f\xe1\x31\xb5\xa6\x67\xfa\x94\x54\x43\xa4\x1b\x3f\x03\x44\xfe\xd5\xa9\x56\x76\x07\x55\x19\x77\x69\x9d\x7e\xc7\xc9\xa6\x92\x69\x96\x4b\x1b\xf6\xc3\x90\xe3\x59\xdf\xdb\x74\x5c\x48\x53\x74\x92\xd6\x06\xc5\x3b\x9a\xff\xfb\x8a\xb8\x5d\xc0\x31\xe0\x23\xc6\x02\x63\x91\x2d\x78\x9a\x52\x0e\x47\xb3\x59\x48\xd2\xfa\x0c\x4c\xe9\xc3\xa0\xf1\xd8\xf6\xb3\x91\x5a\x85\x69\x5f\x10\xb3\xc5\xa9\x11\xc1\x4d\xa3\x45\xb9\x16\x8d\x50\xc5\x35\x2f\x3d\x6a\x17\x51\x57\x9d\xe4\x74\xb7\xf9\xc8\xa9\x83\x8b\x03\x52\xad\xcb\xe8\x60\x4a\x78\xa1\x5f\xee\xa1\x16\xf6\x97\x38\x16\x5a\xa9\x4c\x56\x26\xf1\x36\x19\x87\x40\x11\x14\x88\x83\xee\x54\x88\xd4\x7c\x3f\x22\x9a\x07\xe0\x79\x47\x20\x46\x0e\x8f\x64\x44\x41\xda\xec\x3b\x55\xcc\xfd\xff\xce\xe9\x26\x17\x66\x58\x27\xf6\xc7\xc5\x66\x6f\xb4\xa2\xe9\x73\x35\x0d\xf5\x09\xc1\x59\x5a\xde\x3b\x37\x4d\xf7\xf0\x58\x44\x45\xbd\xd8\x53\x9f\xce\x70\x0b\x80\x56\x58\xfb\xa2\x2d\xbd\xa0\x28\xd1\xcc\x34\x2a\x55\xe1\x53\xe4\x99\xa7\xe1\x15\x1c\x14\xb6\x46\x6a\x23\xe9\xeb\x2a\x55\xc4\x9c\x91\x3c\xa6\x04\x2e\x51\x91\xf9\x7a\xd3\x52\x91\xbd\x8c\xf2\x48\x33\xa0\xda\x01\x75\x35\xca\x19\x5b\x9a\xe7\xe9\x26\xac\x60\x93\x7a\x5d\x21\xfd\xc8\x2a\xcf\x5c\x84\x7e\xf4\xdc\x7b\x76\x97\x3f\x45\xdb\x45\xfe\x42\xdd\x36\x23\x6e\x74\xaf\x95\xb3\xe1\xf7\xbe\xd6\x96\xe6\x07\x09\x60\xba\x06\xc7\xd0\xfd\x8c\x8c\xbf\xfb\x8f\xbd\x92\x31\x3e\xff\x02\x00\x00\xff\xff\x48\x84\x61\xa4\xec\x06\x00\x00")

func templatesConsul_catalogTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesConsul_catalogTmpl,
		"templates/consul_catalog.tmpl",
	)
}

func templatesConsul_catalogTmpl() (*asset, error) {
	bytes, err := templatesConsul_catalogTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/consul_catalog.tmpl", size: 1772, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDockerTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4d\x4f\xe3\x30\x10\xbd\xf7\x57\x8c\x2c\x8e\x6d\xd8\x73\xa5\x1e\x00\x81\x40\x82\x55\xb5\x1c\xf6\x80\x38\xb8\xce\x00\x16\xa9\x8d\x6c\x67\xb7\x28\x9b\xff\xbe\x72\xfc\x95\x78\x93\x14\x55\x7b\x6a\xec\x99\x79\xf3\x66\xe6\x8d\xdb\x34\x67\x3b\xca\xde\x51\x94\x8f\xa8\x7e\xa1\xd2\xb0\xde\x40\xe1\xbf\xdb\x76\xf1\xe4\xad\xfa\xb9\x69\x14\x15\xaf\x08\xc1\xff\x3b\xdd\xe3\x32\x9e\xba\xb0\x4b\xef\xdb\xb6\x0b\x00\x80\xa6\xe1\x2f\xf0\x46\xf5\x15\x57\xac\xe6\xe6\x52\x21\x7d\x47\x75\x4f\x77\x58\xc5\x38\xef\x1a\xd3\x14\xfe\x63\x95\x88\xd9\x44\x6d\x5b\x30\x87\xb2\x73\x28\xcf\x5d\x18\x00\x1e\x3e\x14\x6a\xcd\xa5\x80\x0d\x90\xa6\x79\x45\x33\x4c\x77\x9d\x1c\x52\x4e\xe2\xf9\x39\x02\x03\xb2\xf7\x92\x96\x97\xb4\xa2\x82\x9d\x4e\xb5\x92\xb4\xdc\x79\x8c\x40\x74\x8f\xe6\x4d\x96\x91\x64\x3f\xcd\x83\x33\xe5\xf4\x00\xb4\xe1\xec\xfd\x13\x36\xd0\x85\x3c\xba\x53\x46\x67\xb4\x88\x07\x7a\xb8\x92\x42\x74\xfc\xf5\x09\x05\xec\xe9\x81\x49\x21\x02\x77\xba\x97\xb5\x30\x81\x87\x07\xbf\x70\x97\x19\xb8\x9d\x88\x51\x94\x19\xa9\x5e\x6a\xc1\x62\xbd\x3e\xe8\x3a\x18\x6f\xac\xf1\xc8\x40\xce\x74\x92\x24\x17\x25\x1e\x20\xd7\xea\x90\xb6\x0f\xf3\x32\x75\xc1\x5e\xa5\xee\x60\x81\x02\x68\xa6\x51\x8b\xc8\x19\xea\x60\x8f\xe5\x78\x1a\x9d\x6d\xbd\x01\x3b\x07\x77\xb4\xc8\x63\xee\xbd\xf4\x9c\xe1\x9d\xe5\xbd\x8c\x47\x1b\x14\x59\x58\xcc\x18\x38\x36\x95\x94\xcc\x6f\x56\x2c\xa4\x8f\xd7\xb6\x85\xaf\xa9\xf0\xb7\x61\x6e\xb5\xaa\xe2\x00\x3c\xd0\x56\x49\x23\x99\xac\x26\x90\xd6\xe7\xe7\x9d\xf7\xdd\xf6\xa2\x2c\xed\xde\xa4\x02\xd7\x03\x18\xa9\xcc\x04\x44\x10\xef\x6f\xe4\xaf\x6f\x51\x34\x3e\xee\xa7\xbb\x1c\x8f\x8c\x2d\x1c\xa8\xbb\xd2\x38\xdb\xa4\x4c\xba\xfd\x56\xa0\x5a\x45\x15\x15\x5d\xeb\xff\x80\xc2\x8f\x8a\x32\x04\x72\x4e\x80\x90\xfe\x45\x41\x80\xac\x48\xdb\x8e\x75\x2f\x6f\xdb\x17\x3a\xd5\x6f\xd1\x54\x57\x86\xed\xc8\x36\x7a\xb0\x11\xf1\xe3\xe9\x45\x49\x61\x86\x2f\x72\xb8\x5a\xc2\x19\x93\xc2\x50\x2e\xc2\x43\x7e\x13\x9c\x3b\xbc\xa6\x49\xf6\xde\x52\xf5\x62\xbe\x79\xbf\x7c\x29\xa2\x4b\xc0\x99\xdd\x89\xdc\xfb\x84\x95\x48\x65\x16\x24\x7c\x8e\x6f\x44\xaa\x28\xd3\xa1\x9d\x63\xf8\x77\xda\x00\x99\x5d\xab\x49\x90\x05\xc0\x07\xd5\xfa\x56\x6a\x73\x8b\xb4\x44\x95\x09\x7a\x3b\x34\x4e\x02\x59\x1c\xc5\xa5\xe2\xe6\x33\x47\x08\xd7\x73\xb1\x28\x8c\xfa\xdc\x4a\x2e\x8c\x86\x0d\x3c\x85\x96\x26\x94\xeb\x9e\xc3\x1c\x10\x58\x41\x17\x6d\x4b\x96\x8b\xa8\x2e\x27\xf8\xff\xd0\xf1\x42\xc9\xda\xa0\x2e\x88\xbf\x5e\x25\xa1\x7c\x79\xfb\x88\x63\xa3\xea\x0a\xf3\xb7\x2b\x88\xf9\x87\xb5\xcd\x8e\x2c\xad\x50\xef\x01\x99\x28\x30\x6e\xcf\x11\xc9\xfc\x5b\xfe\x9c\x3c\x26\x75\x31\x2a\x85\x11\x0d\x1c\x19\xfb\xf8\xbc\x4f\x1b\x71\xbf\x03\x71\x84\xdd\xef\x6a\xa6\x4f\xd9\x8c\x26\x86\x33\x9c\x47\xf8\xfd\x1b\x00\x00\xff\xff\xe1\x92\x6c\x7d\x76\x0a\x00\x00")

func templatesDockerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerTmpl,
		"templates/docker.tmpl",
	)
}

func templatesDockerTmpl() (*asset, error) {
	bytes, err := templatesDockerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docker.tmpl", size: 2678, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEcsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x3f\x4f\xc3\x30\x10\xc5\xf7\x7c\x8a\x53\x66\xea\xee\x48\xd9\x00\xb5\x0b\x8a\x58\x18\xa2\x0e\x26\xb9\x86\x88\x60\x57\xe7\x0b\xa8\xb2\xee\xbb\xa3\x4b\xec\x92\x22\x10\x93\xef\xde\xf3\x9f\xf7\x3b\x37\x2f\xb6\x7d\x43\xd7\x85\x43\x8c\x64\x5d\x8f\x60\xf6\x2e\xb0\x75\x2d\x06\x91\x02\x00\xe0\xb2\xc5\xa4\x62\x13\x23\x98\x47\xfb\x8e\x20\x62\x02\xd2\x07\x52\x48\xeb\xda\xd2\x72\x7f\x07\x22\x87\xf9\x9a\x89\x46\xa8\xa0\x54\xb5\x26\xcf\xbe\xf5\x23\x88\xdc\x6e\xb7\xaa\xec\x7c\x60\xed\x66\xd7\x93\xd6\xe5\x7c\xea\x13\x87\xfe\x95\xa1\x02\x75\x9e\x97\x46\xa4\x88\x11\x5d\x27\x52\x14\xcd\x91\xbc\xe3\x2b\x80\xe3\x30\x32\xd2\x43\xd6\x7f\x02\x7d\x9f\x30\xb9\x5a\xa7\xd6\xb0\x89\x53\xe3\xfe\x82\xac\xc1\x4e\x36\x04\xcd\xbc\x43\xdb\x21\xa5\x78\xf5\xb5\x38\xbf\x76\xa2\xc1\xd3\xc0\xe7\xbc\x25\xb7\xb3\x89\x8e\xe9\x5c\xfb\xc1\x71\x80\x0a\x9a\x0c\x00\xe6\x7e\x65\xa4\x5f\x28\x63\x34\x22\xe5\x4d\x01\x90\xe0\x97\xb1\xfe\x83\x63\xc8\x4f\x8c\x61\x59\x36\x7f\x01\x03\xd0\x34\xe2\xf2\x3d\x3d\x72\x9e\xdd\x93\x8a\xfa\xea\x65\xde\x5f\x01\x00\x00\xff\xff\x22\x94\xb0\xce\x2f\x02\x00\x00")

func templatesEcsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEcsTmpl,
		"templates/ecs.tmpl",
	)
}

func templatesEcsTmpl() (*asset, error) {
	bytes, err := templatesEcsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ecs.tmpl", size: 559, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesEurekaTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x50\x3d\x6b\xf4\x30\x0c\xde\xf3\x2b\x44\x78\xd7\xf3\xed\x07\x19\x0e\xde\xa1\xb7\x94\xdb\x3a\x84\x1b\xdc\x44\x4d\x42\x53\xcb\xc8\x4a\x8f\xa2\xfa\xbf\x17\xc7\x4e\x0a\x85\xd2\x49\x96\x9f\x0f\xe9\x51\xfb\x6c\xbb\x57\x74\x7d\xb8\xa9\xb2\x75\x03\x82\x39\x7b\x3f\x4f\x9d\x95\x89\x5c\x88\xb1\x02\x00\x50\x85\x7f\xd6\x7b\x38\x35\x60\xf6\xaf\x42\xbf\xb8\x20\xd6\x75\xb8\x71\x77\x47\x53\x1e\xaa\x49\x6b\x1e\xed\x1b\xc6\x68\x02\xf2\x3b\x72\x28\xf5\xa0\x0a\x03\xca\xe6\x71\xf9\x0f\x06\x62\xbc\xad\x46\x0b\xcf\xd0\x40\x9d\x19\x57\x26\xa1\x8e\xe6\x15\x3f\x1d\x8f\xaa\x60\x2e\xfe\xdc\xf7\x9c\xfa\xc2\x21\x96\x15\xaf\x57\xfd\x1d\xa7\x61\x14\x68\x20\xa3\x4f\xb9\x4d\x78\xa5\x8a\xae\x8f\xb1\x94\xaa\x6a\x5f\x98\x9c\xfc\x71\x86\x6f\x92\xd9\x5e\xaa\x25\x56\xde\xb8\x04\x4e\x5b\xef\xd9\x0b\x21\xaf\x84\x4e\xf8\xe3\x4a\x93\x93\x00\x0d\xb4\xf5\x28\xe2\xeb\xac\xfd\xdd\x1d\x62\x34\x4c\x8b\x60\xc8\xe5\x30\x52\x90\x1f\x93\x01\x78\x99\x31\x0d\x7e\xa0\x20\xe9\x1e\x59\xfa\x09\x42\x33\xdd\x91\xd7\xab\x6c\x79\xbf\x02\x00\x00\xff\xff\xd4\x1f\xc4\xc5\xf5\x01\x00\x00")

func templatesEurekaTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesEurekaTmpl,
		"templates/eureka.tmpl",
	)
}

func templatesEurekaTmpl() (*asset, error) {
	bytes, err := templatesEurekaTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/eureka.tmpl", size: 501, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKubernetesTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xc1\x6e\xc2\x30\x0c\xbd\xf3\x15\x56\xb5\xe3\x94\x0f\x98\xd4\x0b\xd3\x26\x0e\x6c\x9a\x40\xd3\x0e\x88\x43\x68\x0d\x44\x94\x06\x39\xe9\x36\x54\xe5\xdf\x27\x12\xc7\x85\x1e\x26\x7a\x49\x63\xbf\x67\xbf\x17\x7b\xb5\xd1\xd5\x01\xdb\xda\xad\xfb\x9e\x74\xbb\x43\x78\xe0\xc8\xbb\x3e\xe2\xa3\xdc\xe0\xa9\x04\x35\x65\x6c\x08\x13\x00\x80\xbe\x37\x5b\x01\xa8\x67\x43\x55\x67\xfc\x94\x50\x1f\x90\x18\x22\xe5\x55\xd1\xf7\xd7\x95\x43\x28\x54\x95\x18\x9b\xc4\x58\x47\x02\x00\xfe\x9e\x08\x9d\x33\xb6\x85\x12\xae\x58\xa3\x06\xea\x45\x70\x21\x14\xac\x07\xdb\xfa\x9e\xc6\x8d\xd5\xf5\x46\x37\xba\xad\x86\xb6\x47\xf4\x7b\x5b\x8f\x5a\xce\xad\xae\xa7\x0c\x54\x6f\x11\x91\x9b\x8d\xed\xdf\x40\x97\xde\x54\x87\x33\x4b\x49\x9f\x8b\x21\x28\xc1\x53\x87\x52\x61\x10\x2c\xcf\xef\x90\xbe\x91\xf8\xf5\xd3\xe5\xf2\xf8\xd2\x68\x19\x43\xee\x1e\x9f\x89\x9d\x52\x43\xd9\x10\x8a\x64\xba\xa3\x86\xfd\xa6\xa4\xfa\x5c\xcc\xb3\xbd\x1f\x34\xbb\xbd\x87\x12\x86\xec\x57\x0c\x89\xdc\x24\x3d\x9f\x93\xd5\x96\x6c\xeb\x6f\x37\x29\x87\xd8\x4c\xbe\xc6\x5d\x7a\xcd\xf0\x58\x70\x60\x47\xb1\xd7\x44\x96\x9b\xf7\x30\x09\xce\x80\xbc\x92\x49\xf6\x89\x8c\x25\xe3\xcf\x49\xb6\x60\x3e\x38\x1c\x3b\x9d\xb4\x73\x33\xeb\xfc\x0c\x75\x8d\x34\x46\xde\x24\xc7\x93\x21\xdb\x79\x64\x2f\xf1\x3f\xce\x45\xc8\x8b\x4b\x48\xe6\xf2\xaf\x21\x15\xe9\x29\x25\x55\x65\x2e\xd4\x35\xc8\x3e\x63\x52\x2d\xba\x06\xc7\x4b\x9e\xcf\xbf\x00\x00\x00\xff\xff\x3f\x05\x1e\xad\xc1\x03\x00\x00")

func templatesKubernetesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKubernetesTmpl,
		"templates/kubernetes.tmpl",
	)
}

func templatesKubernetesTmpl() (*asset, error) {
	bytes, err := templatesKubernetesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kubernetes.tmpl", size: 961, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesKvTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x54\xb1\x8e\x1a\x31\x10\xed\xf9\x8a\xd1\xe8\xca\x68\x37\x75\x24\x8a\x5c\x94\xe4\x8a\x2b\x4e\xba\x12\x51\x98\xc5\x1c\x16\x8b\x8d\x66\xbd\x39\x90\xe5\x7f\x8f\x6c\x8f\xbd\x5e\xe0\x04\x1d\xf3\xde\xcc\xbc\xf7\xd6\xb6\x73\x4f\x3b\x32\xda\x4a\xbd\x1d\xe0\xc7\x12\x5e\xd5\x60\xa1\x79\x23\xb9\x53\x67\xc0\xb6\x60\x2d\x82\xf7\x0b\xe7\x9e\x36\xa2\x3b\x64\xf2\x35\x3b\x63\x2d\x7a\xbf\x58\xac\xf2\xdf\xb5\x73\x24\xf4\x87\x84\xd2\x3c\x1b\x15\x26\x35\xa9\x32\x48\xfa\x27\xa9\x08\x79\xe7\xbf\x85\x19\xc6\x3a\xf7\xd4\x29\xea\x46\x65\x9f\x49\x8a\x83\xa4\xc0\xfe\x2b\x2d\x20\x42\x03\xd8\x32\xb8\x49\x60\x8b\x80\xf2\x7c\x22\x39\x0c\xca\x68\x8c\x6b\x3e\x95\xdd\xc3\xd5\x10\xef\x27\xbd\x0d\x3a\xf7\x2a\x06\x5b\xf6\x7a\x8f\xcd\x9c\xbe\x5e\x00\x00\x4c\x83\x61\x09\x78\x23\xcc\x7b\x5c\x38\x17\xfb\xa3\xec\xde\x88\xed\xb3\xe8\x85\xee\x6e\x44\x07\x68\xc3\x50\x90\x7c\x94\x76\x6f\xb6\xc8\xa9\x58\xd5\x1d\x2e\xa5\x63\x27\xfa\x41\xde\x6f\x4b\xcc\xda\x65\xbd\xf3\xa1\xc7\x9a\x9c\x1c\x26\x1d\xec\x6e\x3e\x0b\x23\x81\xb5\x2d\xa1\xe8\x8c\xcb\x27\xd3\x47\x71\xfe\x65\xb4\xfe\x79\xb4\x57\x96\x8f\xe2\xdc\x19\xad\x83\x6c\x71\x34\xa3\xb6\xec\x96\x1b\x7e\x9f\x2d\x89\xce\x1a\xfa\x33\xea\xee\xeb\x56\x99\x69\xbb\x51\x77\xb5\xf1\x69\xef\x6d\x71\x36\xfb\x61\x2a\xdc\x94\x02\x49\x52\x93\xdf\xd9\x8a\x74\x1e\x6a\xcd\x29\xb4\xfb\x2b\xa7\x83\x51\x65\xc5\x97\x84\x2f\xc1\x43\x5d\xcc\x2b\x58\xe3\x3d\x26\x91\x23\xf5\x69\x7b\x95\xd9\x48\x3d\xe6\x8f\xf6\x29\xd5\xc7\x3e\x99\x88\x8c\xef\x08\x91\x93\xea\x58\xa9\x2a\xea\x56\xe5\x25\x98\x6e\x73\x29\xb1\xfd\xea\x2d\x89\x37\x98\x45\x65\x4c\x6a\x4b\x97\x37\xa3\xb4\x8d\x17\xfc\xfd\xd4\x2b\x1b\xd6\x87\xcd\x11\x3b\x45\x0c\xb9\x63\xda\x18\x1c\x96\xc9\xc5\x64\x7e\x13\xae\x8d\x72\xbd\x98\x3d\x89\x61\x78\x31\x83\x7d\x91\x62\x2b\x69\x32\x6d\x69\xe4\x5b\x34\x67\xe4\xfd\x27\x52\x86\x94\xbd\xcc\x62\x8a\x74\x06\x32\xb1\xf6\xb5\x84\x55\x89\xa7\xaa\x33\x13\x82\xd4\xf0\x99\xbe\x71\x26\xd1\xcf\x3a\x07\x44\x66\xb4\xb2\x7a\x85\x01\xdb\x54\x6a\xb1\x0c\x08\x44\x9e\x9f\xb0\x0a\xf9\x3a\xb1\x26\x71\xef\x1c\x95\xf0\xa3\xb1\x97\x37\x31\x86\x62\xc9\xb0\x52\x5b\x8e\xc4\xff\x00\x00\x00\xff\xff\x09\x96\x0f\x92\x3a\x06\x00\x00")

func templatesKvTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesKvTmpl,
		"templates/kv.tmpl",
	)
}

func templatesKvTmpl() (*asset, error) {
	bytes, err := templatesKvTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/kv.tmpl", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMarathonTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xc1\x6a\x1b\x31\x10\xbd\xfb\x2b\x06\xd1\x63\x23\xdf\x03\x3e\xc4\xa9\x43\x0a\x09\x98\xa6\xd0\x83\xf1\x41\xd6\x8e\x6d\xe1\xb5\x66\x19\x69\x5b\x07\x75\xff\xbd\xec\x4a\xab\x55\x5c\x1a\x28\x39\xad\xa4\x37\x7a\xf3\xde\x9b\x55\x08\x9f\x54\xd3\x38\xb8\x5d\x80\xbc\x6b\x9a\xda\x68\xe5\x0d\x59\xd7\x75\xb3\xcd\x4e\xe9\x13\xda\xca\x6d\x43\x60\x65\x0f\x08\xf2\xbb\x72\xa7\x1e\x02\x00\xc8\xb0\x14\x69\x15\xc2\x01\xfd\x32\xae\x41\xc2\x40\xdc\x75\x42\x3a\xe4\x9f\xc8\x4e\x8a\xb8\xb8\x09\x41\x7e\xfd\x02\xbf\x81\xb1\xa9\x95\x46\x10\x52\x80\xb8\x11\x5d\x27\xb6\x03\x73\xcb\x35\x2c\x40\x0c\x74\x6b\x26\x4f\x9a\xea\x89\xef\x76\x3e\x2f\x1b\xbd\x0c\x9c\x05\x1c\xaf\x11\xfb\x42\xc2\x40\xfb\x0b\xcd\xe1\xe8\x61\x01\x43\xc5\x8f\xb8\xcb\x35\xb3\x10\xd0\x56\x5d\x37\x9b\x65\xb7\x57\x79\x84\x00\x66\x0f\x47\xe5\x9e\xd5\xe5\x9e\xac\x7d\x52\x3b\xac\x1d\x48\x48\x81\xfc\x33\x92\x07\x26\xeb\xd1\x56\x53\x34\x7d\x2a\x67\x75\xd1\x64\xed\x36\xdd\x05\x50\x67\x6a\x6d\xd6\x97\x9a\xdc\xc5\xc3\xa2\x09\x00\x5e\x3c\x2b\xed\x89\xf7\xad\xd5\x39\xa9\x74\x61\x35\x82\x0f\x3d\x38\xb4\xca\xd6\xb2\x83\x27\x52\xd5\x52\xd5\xca\x6a\xe4\x0f\xda\xa8\x49\x55\xbb\x44\x35\x79\x39\xa3\x3f\x52\x95\xb5\x95\xfd\x9e\x23\x14\x95\x8d\xf5\xce\x1b\x7d\x7a\x1d\xbd\xbf\xc4\x9d\x2c\xa6\x92\xa5\xdf\x1b\xd6\xad\xf1\x4b\x46\x75\xfa\xb0\x78\x1d\xc9\x76\x91\x6c\x5b\x24\xdc\x30\x3a\x67\xc8\x66\x0b\x6f\xfb\xae\xa6\x82\xeb\x88\xd3\x5f\xb4\xd9\xa7\x8e\xc5\xf3\xb9\xfa\xa1\x00\xa6\x22\x29\xc6\xe5\x5f\xaf\x63\x5e\xbe\x8e\xe4\xa9\x97\xf5\xae\xbd\x18\x6e\xa3\x9c\x7b\x24\xe7\x1f\x51\x55\xc8\x63\xbc\xeb\xb7\xa7\x72\x90\xd2\xb0\x21\x36\x3e\xcf\x60\x3d\xee\x23\x8c\xd6\xf3\xeb\x9a\x8c\xf5\x0e\x16\xb0\x19\x2d\x1d\xd0\xaf\x0a\x44\xa6\x31\x88\x10\x7a\x05\x9f\x67\x00\x29\x90\x98\xed\xff\xf9\x95\x4c\xad\x47\x27\xc5\xf0\xbd\x39\x92\xf3\xef\x87\x03\xc0\x6d\x8d\x79\x64\x63\x28\xdf\xfa\x43\x59\x4e\xe9\x4f\x00\x00\x00\xff\xff\x25\x8a\x49\x56\xf6\x04\x00\x00")

func templatesMarathonTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMarathonTmpl,
		"templates/marathon.tmpl",
	)
}

func templatesMarathonTmpl() (*asset, error) {
	bytes, err := templatesMarathonTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/marathon.tmpl", size: 1270, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMesosTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x51\xcd\x6a\xf3\x40\x0c\xbc\xfb\x29\x44\xf8\x8e\x5f\x36\xf7\x80\x0f\x2d\x4d\x48\x2f\x25\x94\x42\x0f\x21\x87\x6d\xac\x3a\x26\xee\xae\x91\x94\x96\xb0\xec\xbb\x97\xfd\xb3\x93\x42\xa1\xa7\x5d\x69\x46\x62\x66\xe4\xdc\x3f\x3d\x0c\x0c\xcb\x1a\xd4\xdd\x30\xf4\xdd\x41\x4b\x67\x0d\x7b\x5f\xed\xde\xf4\xe1\x84\xa6\xe1\xbd\x73\xa4\x4d\x8b\xa0\x5e\x34\x9f\x02\x04\x00\x30\xc2\x2a\x7f\x9c\x6b\x51\xee\xd3\x1f\x14\xc4\xbd\xde\x2b\x46\xfa\x44\xe2\xfc\xce\x23\xeb\xf1\x01\x94\xf7\xfb\xb8\xe7\x4c\x3d\xd4\x30\x8b\xfd\x2d\x59\xb1\x07\xdb\x4f\xe3\xcb\xc5\x22\x22\x1b\xcb\x12\x66\x96\x89\x67\x49\x26\xce\x2c\xee\xf9\xc2\xae\x3d\x0a\xd4\x10\x19\xaf\xa9\x1a\x39\x95\x73\x68\x1a\xef\xab\x6a\xf7\x4e\xd6\xc8\xad\xaf\x1f\xce\x01\x26\x92\x2a\xbf\xa4\x7c\x1d\xaa\x95\x69\x9e\xf4\x07\x16\x0f\xd9\x7f\x70\x71\x1d\xc5\x3a\x0f\x8e\x91\x24\xa5\x83\x66\x0e\x6e\x36\xa8\x1b\xa4\xa2\x77\x7b\xdb\x55\x51\xc5\x40\x9d\xa5\x4e\x2e\x23\xa9\xd4\x09\x46\x23\x74\xd9\xda\xce\x08\x43\x0d\xbb\xe2\xa6\x45\x59\x5d\x21\x2a\xdf\x6b\xe6\x5c\x50\xf0\xbf\x02\xc8\x59\xa4\xfc\xff\x6c\x55\x91\x3d\x0b\x72\x7a\xe6\x47\xcb\xf2\x6b\x22\x00\x74\xee\x71\x3c\x6b\x49\xe2\x39\x34\x63\x0c\xe5\x1a\xdf\x01\x00\x00\xff\xff\x33\xcb\x01\xe6\x7f\x02\x00\x00")

func templatesMesosTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesMesosTmpl,
		"templates/mesos.tmpl",
	)
}

func templatesMesosTmpl() (*asset, error) {
	bytes, err := templatesMesosTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/mesos.tmpl", size: 639, mode: os.FileMode(420), modTime: time.Unix(1480083701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNotfoundTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x76\x5c\x0a\x0a\x0a\x0a\x36\x25\x99\x25\x39\xa9\x76\x21\x45\x89\xa9\x69\x99\xd9\x36\xfa\x10\x2e\x97\x8d\x3e\x44\x89\x4d\x52\x7e\x4a\x25\x44\xa5\x7f\x46\x46\x46\x86\x42\x6e\x62\x9e\x8e\x42\x49\x46\x66\xb1\x42\x66\xb1\x42\x52\x62\x8a\x9e\x9e\x1e\x97\x8d\x3e\x44\x95\x8d\x3e\xd8\x78\x40\x00\x00\x00\xff\xff\xb8\x78\x48\x56\x75\x00\x00\x00")

func templatesNotfoundTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesNotfoundTmpl,
		"templates/notFound.tmpl",
	)
}

func templatesNotfoundTmpl() (*asset, error) {
	bytes, err := templatesNotfoundTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/notFound.tmpl", size: 117, mode: os.FileMode(420), modTime: time.Unix(1480083701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRancherTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x53\x3b\x6f\xdb\x30\x10\xde\xfb\x2b\x0e\x42\x46\x47\xd9\x0d\x68\xa8\x0d\x07\x19\x92\xc2\x68\x86\x0e\x86\x07\x9a\x3a\xcb\x84\x65\xd2\x38\x52\xad\x03\x82\xff\xbd\xa0\xf8\xd0\x03\x29\xd2\x44\x8b\x48\xde\x7d\x77\xdf\x77\x0f\x6b\xef\x0e\x8c\x9f\x51\xd6\xaf\x48\xbf\x91\x34\x2c\x2b\x28\x57\xe1\x49\x3b\xf7\x6d\x17\xcd\x7a\x6f\x2d\x31\xd9\x20\x24\xc0\x0f\x76\xc1\x45\xbe\xcd\x71\x00\x00\xd6\x8a\x23\x9c\x98\x5e\x0b\xe2\x9d\x30\x2b\x42\x76\x46\x7a\x66\x07\x6c\x33\x2e\xba\xe6\x34\x65\x3c\xdc\x0f\xcc\x7c\x22\xe7\x4a\x1e\xa2\x1c\x42\x94\x7d\x0f\x03\xc0\xdb\x95\x50\x6b\xa1\x24\x54\x50\x58\xdb\xa0\x99\xa6\xdb\x0c\x0e\x43\xce\x22\xf2\x0b\x04\x26\x64\x9f\x15\xab\x57\xac\x65\x92\x7f\x9d\x6a\xab\x58\x7d\x88\x31\x12\xd1\x0b\x9a\x93\xaa\x33\xc9\x71\x9a\x97\x60\x9a\xd3\x03\xd0\x46\xf0\xf3\x1b\x54\xd0\x43\x5e\xc3\x6d\x46\xe7\x5d\x11\x2f\xec\xb6\x56\x52\xf6\xfc\xf5\x17\x04\x5c\xd8\x8d\x2b\x29\x13\x77\x76\x51\x9d\x34\x89\x47\x0c\xfe\x3d\x3c\xce\x82\xfb\x8e\x18\x62\xdc\x28\x3a\x76\x92\x67\xbd\x11\xb4\x49\xc6\x47\x6f\xfc\xa0\x21\x71\xde\x84\xac\xf1\xb6\x80\x3b\x71\xf5\x43\x96\x30\xe5\x5a\x49\xc3\x84\x44\xd2\x39\xf5\x7f\x28\xd3\x61\xcc\xe3\xdf\xdb\xfb\xf0\xce\x25\xad\x1d\xb5\x99\xf4\x96\x94\x51\x5c\x8d\x47\x60\xf9\xf0\xe0\x31\x57\xe7\x96\xc1\x45\x91\x79\xa7\x73\x7f\x50\x34\xa7\x5c\xb1\x5f\xe1\xf6\xaf\xce\xe5\xc3\xee\x48\x4a\x9a\xe9\xb6\xa5\xa7\xb8\x6e\x9e\xb7\xe0\xd8\xaf\xdb\x63\xf2\x4e\x8d\xcd\xf0\xb2\x48\x47\xaf\x70\x1c\xc2\xb9\x22\x28\x4d\x7b\x5b\x41\x31\x14\xab\x41\x13\x77\x38\x67\x4a\x9a\xae\x4c\xeb\x27\xa5\xcd\x13\xb2\x1a\x29\x29\xdb\x4e\x5f\x07\x50\xc0\x90\x50\x24\x4c\x9e\xe0\x6d\xba\xcf\xfc\x50\x1a\x7a\xdb\x2a\x21\x8d\x86\x0a\x76\x49\x7b\x83\x66\x33\xb2\xcc\x40\xfe\x2b\xac\x2d\x9d\x2b\x16\xe3\x7a\xee\x3f\x53\x8b\x92\x54\x67\x50\x97\x45\xff\xbf\xff\xb0\x6a\xd4\xb5\x98\xc7\x23\xd5\xff\xa7\x7f\x1c\xd7\x2b\x35\xf4\x6f\x00\x00\x00\xff\xff\x25\x7d\xdf\xbe\x5e\x05\x00\x00")

func templatesRancherTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRancherTmpl,
		"templates/rancher.tmpl",
	)
}

func templatesRancherTmpl() (*asset, error) {
	bytes, err := templatesRancherTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rancher.tmpl", size: 1374, mode: os.FileMode(420), modTime: time.Unix(1492623594, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/consul_catalog.tmpl": templatesConsul_catalogTmpl,
	"templates/docker.tmpl": templatesDockerTmpl,
	"templates/ecs.tmpl": templatesEcsTmpl,
	"templates/eureka.tmpl": templatesEurekaTmpl,
	"templates/kubernetes.tmpl": templatesKubernetesTmpl,
	"templates/kv.tmpl": templatesKvTmpl,
	"templates/marathon.tmpl": templatesMarathonTmpl,
	"templates/mesos.tmpl": templatesMesosTmpl,
	"templates/notFound.tmpl": templatesNotfoundTmpl,
	"templates/rancher.tmpl": templatesRancherTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"consul_catalog.tmpl": &bintree{templatesConsul_catalogTmpl, map[string]*bintree{}},
		"docker.tmpl": &bintree{templatesDockerTmpl, map[string]*bintree{}},
		"ecs.tmpl": &bintree{templatesEcsTmpl, map[string]*bintree{}},
		"eureka.tmpl": &bintree{templatesEurekaTmpl, map[string]*bintree{}},
		"kubernetes.tmpl": &bintree{templatesKubernetesTmpl, map[string]*bintree{}},
		"kv.tmpl": &bintree{templatesKvTmpl, map[string]*bintree{}},
		"marathon.tmpl": &bintree{templatesMarathonTmpl, map[string]*bintree{}},
		"mesos.tmpl": &bintree{templatesMesosTmpl, map[string]*bintree{}},
		"notFound.tmpl": &bintree{templatesNotfoundTmpl, map[string]*bintree{}},
		"rancher.tmpl": &bintree{templatesRancherTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


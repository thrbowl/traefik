[backends]
{{range $service := .Services}}
  {{ $backendName := getServiceBackendName $service }}

  {{ $circuitBreaker := getCircuitBreaker $service.Attributes }}
  {{if $circuitBreaker }}
  [backends."backend-{{ $backendName }}".circuitBreaker]
    expression = "{{ $circuitBreaker.Expression }}"
  {{end}}

  {{ $loadBalancer := getLoadBalancer $service.Attributes }}
  {{if $loadBalancer }}
  [backends."backend-{{ $backendName }}".loadBalancer]
    method = "{{ $loadBalancer.Method }}"
    sticky = {{ $loadBalancer.Sticky }}
    {{if $loadBalancer.Stickiness }}
    [backends."backend-{{ $backendName }}".loadBalancer.stickiness]
      cookieName = "{{ $loadBalancer.Stickiness.CookieName }}"
    {{end}}
  {{end}}

  {{ $maxConn := getMaxConn $service.Attributes }}
  {{if $maxConn }}
  [backends."backend-{{ $backendName }}".maxConn]
    extractorFunc = "{{ $maxConn.ExtractorFunc }}"
    amount = {{ $maxConn.Amount }}
  {{end}}

  {{ $healthCheck := getHealthCheck $service.Attributes }}
  {{if $healthCheck }}
  [backends.backend-{{ $backendName }}.healthCheck]
    path = "{{ $healthCheck.Path }}"
    port = {{ $healthCheck.Port }}
    interval = "{{ $healthCheck.Interval }}"
  {{end}}

{{end}}
{{range $index, $node := .Nodes}}

  [backends."backend-{{ getNodeBackendName $node }}".servers."{{ getServerName $node $index }}"]
    url = "{{ getProtocol $node.Service.Tags }}://{{ getBackendAddress $node }}:{{ $node.Service.Port }}"
    weight = {{ getWeight $node.Service.Tags }}

{{end}}

[frontends]
{{range $service := .Services}}

  [frontends."frontend-{{ $service.ServiceName }}"]
    backend = "backend-{{ getServiceBackendName $service }}"
    priority = {{ getPriority $service.Attributes }}
    passHostHeader = {{ getPassHostHeader $service.Attributes }}
    passTLSCert = {{ getPassTLSCert $service.Attributes }}

    entryPoints = [{{range getFrontEndEntryPoints $service.Attributes }}
      "{{.}}",
      {{end}}]

    {{ $whitelistSourceRange := getWhitelistSourceRange $service.Attributes }}
    {{if $whitelistSourceRange }}
    whitelistSourceRange = [{{range $whitelistSourceRange }}
      "{{.}}",
      {{end}}]
    {{end}}

    basicAuth = [{{range getBasicAuth $service.Attributes }}
      "{{.}}",
      {{end}}]

    {{ $redirect := getRedirect $service.Attributes }}
    {{if $redirect }}
    [frontends."frontend-{{ $service.ServiceName }}".redirect]
      entryPoint = "{{ $redirect.EntryPoint }}"
      regex = "{{ $redirect.Regex }}"
      replacement = "{{ $redirect.Replacement }}"
    {{end}}

    {{if hasErrorPages $service.Attributes }}
    [frontends."frontend-{{ $service.ServiceName }}".errors]
      {{range $pageName, $page := getErrorPages $service.Attributes }}
      [frontends."frontend-{{ $service.ServiceName }}".errors.{{ $pageName }}]
        status = [{{range $page.Status }}
          "{{.}}",
          {{end}}]
        backend = "{{ $page.Backend }}"
        query = "{{ $page.Query }}"
      {{end}}
    {{end}}

    {{if hasRateLimit $service.Attributes }}
    {{ $rateLimit := getRateLimit $service.Attributes }}
    [frontends."frontend-{{ $service.ServiceName }}".rateLimit]
      extractorFunc = "{{ $rateLimit.ExtractorFunc }}"

      [frontends."frontend-{{ $service.ServiceName }}".rateLimit.rateSet]
        {{range $limitName, $limit := $rateLimit.RateSet }}
        [frontends."frontend-{{ $service.ServiceName }}".rateLimit.rateSet.{{ $limitName }}]
          period = "{{ $limit.Period }}"
          average = {{ $limit.Average }}
          burst = {{ $limit.Burst }}
        {{end}}

    {{end}}

    {{ $headers := getHeaders $service.Attributes }}
    {{if $headers }}
    [frontends."frontend-{{ $service.ServiceName }}".headers]
      SSLRedirect = {{ $headers.SSLRedirect }}
      SSLTemporaryRedirect = {{ $headers.SSLTemporaryRedirect }}
      SSLHost = "{{ $headers.SSLHost }}"
      STSSeconds = {{ $headers.STSSeconds }}
      STSIncludeSubdomains = {{ $headers.STSIncludeSubdomains }}
      STSPreload = {{ $headers.STSPreload }}
      ForceSTSHeader = {{ $headers.ForceSTSHeader }}
      FrameDeny = {{ $headers.FrameDeny }}
      CustomFrameOptionsValue = "{{ $headers.CustomFrameOptionsValue }}"
      ContentTypeNosniff = {{ $headers.ContentTypeNosniff }}
      BrowserXSSFilter = {{ $headers.BrowserXSSFilter }}
      ContentSecurityPolicy = "{{ $headers.ContentSecurityPolicy }}"
      PublicKey = "{{ $headers.PublicKey }}"
      ReferrerPolicy = "{{ $headers.ReferrerPolicy }}"
      IsDevelopment = {{ $headers.IsDevelopment }}

      {{if $headers.AllowedHosts }}
      AllowedHosts = [{{range $headers.AllowedHosts }}
        "{{.}}",
        {{end}}]
      {{end}}

      {{if $headers.HostsProxyHeaders }}
      HostsProxyHeaders = [{{range $headers.HostsProxyHeaders }}
        "{{.}}",
        {{end}}]
      {{end}}

      {{if $headers.CustomRequestHeaders }}
      [frontends."frontend-{{ $service.ServiceName }}".headers.customRequestHeaders]
        {{range $k, $v := $headers.CustomRequestHeaders }}
        {{$k}} = "{{$v}}"
        {{end}}
      {{end}}

      {{if $headers.CustomResponseHeaders }}
      [frontends."frontend-{{ $service.ServiceName }}".headers.customResponseHeaders]
        {{range $k, $v := $headers.CustomResponseHeaders }}
        {{$k}} = "{{$v}}"
        {{end}}
      {{end}}

      {{if $headers.SSLProxyHeaders }}
      [frontends."frontend-{{ $service.ServiceName }}".headers.SSLProxyHeaders]
        {{range $k, $v := $headers.SSLProxyHeaders}}
        {{$k}} = "{{$v}}"
        {{end}}
      {{end}}
    {{end}}

    [frontends."frontend-{{ $service.ServiceName }}".routes."route-host-{{ $service.ServiceName }}"]
      rule = "{{ getFrontendRule $service }}"

{{end}}
